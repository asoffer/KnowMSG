function List(){this.head={prev:null,next:null};this.head.next=this.head;this.head.prev=this.head;this.size=0}List.prototype={toString:function(){if(this.size==0){return"[]"}var a="["+this.head.next.data;var b=this.head.next;while(b.next!=this.head){b=b.next;a+=", "+b.data}return a+"]"},copy:function(){var a=new List();var b=this.head.next;while(b!=this.head){a.pushBack(b.data);b=b.next}return a},pushFront:function(a){++this.size;var b={data:a,prev:this.head,next:this.head.next};this.head.next=b;b.next.prev=b},pushBack:function(a){++this.size;var b={data:a,prev:this.head.prev,next:this.head};this.head.prev=b;b.prev.next=b},popFront:function(){if(this.size==0){return}d=this.head.next.data;this.head.next.next.prev=this.head;this.head.next=this.head.next.next;--this.size;return d},popBack:function(){if(this.size==0){return}d=this.head.prev.data;this.head.prev.prev.next=this.head;this.head.prev=this.head.prev.prev;--this.size;return d},addBefore:function(b,a){var e=this.head.next;if(e!=this.head){while(!a(e.data)){e=e.next;if(e==this.head){return this.pushBack(b)}}}++this.size;var c={data:b,prev:e.prev,next:e};e.prev.next=c;c.next.prev=c},addAfter:function(b,a){var e=this.head.next;while(!a(e.data)){e=e.next;if(e==this.head){return this.pushBack(b)}}++this.size;var c={data:b,prev:e,next:e.next};e.next=c;c.next.prev=c},first:function(){return this.head.next.data},last:function(){return this.head.prev.data},empty:function(){this.size=0;this.head.next=this.head;this.head.prev=this.head},remove:function(a){var b=this.head.next;while(b!=this.head){if(a.equals(b.data)){b.prev.next=b.next;b.next.prev=b.prev;--this.size;return a}b=b.next}return},recomputeSize:function(){this.size=0;var a=this.head.next;while(a!=this.head){++this.size;a=a.next}},iterate:function(a){var b=this.head.next;while(b!=this.head){a(b.data);b=b.next}},iterateReverse:function(a){var b=this.head.prev;while(b!=this.head){a(b.data);b=b.prev}},powerSet:function(){var b=new List();b.pushBack(new List());var g=this.head.next;while(g!=this.head){var e=b.size;for(var c=0;c<e;++c){var a=b.popFront();var f=a.copy();f.pushBack(g.data);b.pushBack(a);b.pushBack(f)}g=g.next}return b}};function Option(b,a){this.p=b;this.n=b.n;this.np=a;this.proofComplete=false;this.proof=""}Option.prototype={toString:function(){return this.np.toString()}};function Prime(c,b,a){this.n=c;this.p=b;this.pow=a;this.np=new List();this.proofCount=0;this.proofComplete=false}Prime.prototype={toString:function(){return this.p.toString()},listPowers:function(){var a=new List();for(var b=0;b<=this.pow;++b){a.pushBack(p.pow(b))}return a},toStringWithPower:function(){if(this.pow==1){return this.p}return this.p+"^{"+this.pow+"}"},incompleteNPSize:function(){var b=0;var a=this.np.head.next;while(a!=this.np.head){if(!a.data.proofComplete){++b}a=a.next}return b},smallestNP:function(){var a=this.np.head.next;while(a!=this.np.head){if(!a.data.proofComplete){break}a=a.next}return a.data},prove:function(){var e=this.np.head.next;var c=false;while(e!=this.np.head){var a=e.data.proofComplete;TechCount.apply(this.n,this,e.data);TechDNorm.apply(this.n,this,e.data);TechSymDiv.apply(this.n,this,e.data);TechNormInSym.apply(this.n,this,e.data);TechLAI.apply(this.n,this,e.data);TechLI.apply(this.n,this,e.data);TechDP.apply(this.n,this,e.data);c=c||(a!=e.data.proofComplete);e=e.next}e=this.np.head.next;while(e!=this.np.head){if(!e.data.proofComplete){return c}e=e.next}this.proofComplete=true;return false},showProof:function(){var a="";var b=this.np.head.next;while(b!=this.np.head){a+="<h6>Case $n_{"+this.p+"}="+b.data.np+"$:</h6>"+b.data.proof;b=b.next}return a}};function Num(a){this.n=a;this.primes=new List();this.factors=new List();if(Math.log(this.n)>40){this.proofComplete=true;this.proofShown=true;$("#inner_statement").html("<p>Unfortunately the input is to big for me to handle.</p>");$("#proof").html("<p></p>");return}this.factor();this.divInject=Number.MAX_VALUE;this.smartInject=Number.MAX_VALUE;this.needSmart=false;this.proofComplete=false;this.proof="";this.proofShown=false;this.workedOptions=new List()}Num.prototype={toString:function(){return this.n},factor:function(){if(this.primes.size!=0){return}var a=this.n;var c=2;while(a>=c){var b=0;while(a%c==0){++b;a/=c}if(b!=0){this.primes.pushBack(new Prime(this,c,b))}++c}},computeFactorList:function(){if(this.factors.size!=0){return}this.factors.pushBack(1);var e=this.primes.head.next;while(e!=this.primes.head){var c=this.factors.size;for(i=0;i<c;++i){var a=this.factors.popFront();for(var b=0;b<=e.data.pow;++b){this.factors.pushBack(a*Math.pow(e.data.p,b))}}e=e.next}this.factors=sort(this.factors)},kModM:function(c,a){this.computeFactorList();var b=new List();var e=this.factors.head.next;while(e!=this.factors.head){if(e.data%a==c){b.pushBack(e.data)}e=e.next}return b},buildNP:function(){var c=this.primes.head.next;while(c!=this.primes.head){var b=this.kModM(1,c.data.p);var a=b.head.next;while(a!=b.head){c.data.np.pushBack(new Option(c.data,a.data));a=a.next}c=c.next}},isPrimePower:function(){return(this.primes.size==1)},isPrime:function(){return(this.isPrimePower()&&this.primes.first().pow==1)},prove:function(){if(this.proofComplete){return}if(TechOne.apply(this)||sporadicTest(this)||TechPrimes.apply(this)||isSimple(this)){return}this.computeFactorList();this.buildNP();if(TechSylow.apply(this)||TechTwoOdd.apply(this)){return}this.computeInjections();if(TechInjectBound.apply(this,this.divInject)||TechInjectBound.apply(this,this.smartInject)){return}var e=this.primes.head.next;while(e!=this.primes.head){while(e.data.np.first().np<this.divInject){e.data.np.popFront()}while(e.data.np.first().np<this.smartInject){this.needSmart=true;e.data.np.popFront()}e=e.next}var c=true;while(c&&!this.proofComplete){c=false;e=this.primes.head.prev;while(e!=this.primes.head){var a=e.data.prove();c=c||a;if(e.data.proofComplete){this.proofComplete=true;return}e=e.prev}}$("#inner_statement").html("<p>There are no simple groups of order "+this+"="+showFactorization(this)+".</p>")},countElements:function(){var b=0;var a=this.primes.head.next;while(a!=this.primes.head){if(a.data.pow==1){b+=a.data.smallestNP().np*(a.data.p-1)}else{b+=Math.pow(a.data.p,a.data.pow)}a=a.next}return b},showProof:function(){if(this.proofShown){return this.proof}if(this.proofComplete){this.proof+=pf_basic(this,this.needSmart);if(this.workedOptions.size==1){this.proof+=this.workedOptions.first().proof}else{var c=this.workedOptions.head.next;while(c!=this.workedOptions.head){this.proof+="<h6>Case $n_{"+c.data.p+"}="+c.data.np+"$:</h6>"+c.data.proof;c=c.next}}$("#inner_statement").html("<p>There are no simple groups of order $"+this.n+"="+showFactorization(this)+"$.</p>")}else{$("#inner_statement").html("<p>There are no simple groups of order $"+this.n+"="+showFactorization(this)+"$.</p>");this.proof="<p>While I cannot find an elementary proof, ";if(this.primes.size==2){this.proof+="Burnside's Theorem tells us that for primes $p$ and $q$, and natural numbers $a$ and $b$, groups of order $p^a\\cdot q^b$ are solvable. The only solvable groups which are simple are the cyclic groups of prime order. Since $"+this.n+"$ is not prime, no group of order $"+this.n+"$ can be simple."}else{if(this.n%2==1){this.proof+="the Feit-Thompson Theorem says that all groups of odd order are solvable. The only solvable groups which are simple are the cyclic groups of prime order. Since $"+this.n+"$ is not prime, no group of order $"+this.n+"$ can be simple."}else{this.proof+="the classification theorem for finite simple groups tells us the possible sizes of finite simple groups, to which $"+this.n+"$ does not belong."}}var a="asoffer";this.proof+=' Below is all of the information which I could figure out in a proof-like format. Do you know an elementary technique that would solve this case? <a href = "mailto:'+a+'@math.ucla.edu">Let me know</a>!</p><hr>';this.proof+=pf_basic(this,this.divInject!=this.smartInject);var b="";var c=this.workedOptions.head.next;while(c!=this.workedOptions.head){this.proof+="<h6>Case $n_{"+c.data.p+"}="+c.data.np+"$:</h6>"+c.data.proof;c=c.next}}this.proofShown=true;return this.proof},computeInjections:function(){var a=0;var j=this.primes.head.next;while(j!=this.primes.head){var h=Math.floor(j.data.pow/(j.data.p-1));while(factorialDivisors(h,j.data.p)<=j.data.pow){++h}if(factorialDivisors(h-1,j.data.p)==j.data.pow){h-=j.data.p}if(a<h){a=h}j=j.next}this.divInject=a;var e=1;var b=1;var f=this.n;while(f>1&&e<(this.divInject<<1)){var c=gcd(f,b);f/=c;e*=b/c;++b}this.smartInject=this.divInject;if(e>=(this.divInject<<1)){return}++this.smartInject;if(e==1){++this.smartInject}},sumOfPrimeDivisors:function(){var a=0;var b=this.primes.head.next;while(b!=this.primes.head){a+=b.data.p;b=b.next}return a},mustBeCyclic:function(){var a=this.primes.head.next;while(a!=this.primes.head){if(this.kModM(1,a.data.p).size!=1||a.data.pow>1){return false}a=a.next}return true}};function Simple(a){this.name=a;this.sym=null;this.fn=function(c,b){return 1};this.exception=function(c,b){return false};this.determined=true;this.logBound=1;this.powSize=null}Simple.prototype={toString:function(){return"["+this.name+" simple group class]"},isInstance:function(c){if(this.determined){var e=Math.floor(Math.pow(c.n,1/this.logBound)+1);while(this.fn(0,e)>c){--e}if(this.fn(0,e)==c&&(new Num(e)).isPrimePower()&&!this.exception(0,e)){return{q:e,n:0}}else{return false}}else{if(this.powSize==-1){var a=this.isThisSize(c);if(!a){return false}if(!this.exception(a.n,a.q)){return a}return false}else{var b=this.generatePotentialList(c);var f=b.head.next;while(f!=b.head){if(this.fn(f.data.n,f.data.q)==c&&(new Num(f.data.q)).isPrimePower()&&!this.exception(f.data.n,f.data.q)){return f.data}f=f.next}return false}}},generatePotentialList:function(b){var f=b.primes.head.next;var a=new List();while(f!=b.primes.head){var c=f.data.pow;var e=1;while(this.powSize(e)<=c){if(this.powSize(e)>0&&c%this.powSize(e)==0){a.pushBack({q:Math.pow(f.data.p,c/this.powSize(e)),n:e})}++e}f=f.next}return a},};var simpleA=new Simple("alternating group");simpleA.sym=function(b,a){return"A_{"+b+"}"};simpleA.determined=false;simpleA.exception=function(b,a){return b<5};simpleA.powSize=-1;simpleA.isThisSize=function(b){var a=1;var e=2;while(b.n>a){++e;a*=e}if(b.n==a){return{n:e,q:0}}return false};var simplePSL=new Simple("projective special linear group");simplePSL.sym=function(b,a){return"\\mbox{PSL}_{"+b+"}("+a+")"};simplePSL.determined=false;simplePSL.exception=function(b,a){return(b==2&&(a==2||a==3))};simplePSL.powSize=function(a){return triangle(a-1)};simplePSL.fn=function(c,b){var a=1;for(i=2;i<=c;++i){a*=Math.pow(b,i)-1}return a*Math.pow(b,this.powSize(c))/gcd(c,b-1)};var simpleO=new Simple("orthogonal group");simpleO.sym=function(b,a){return"B_{"+b+"}("+a+")"};simpleO.determined=false;simpleO.exception=function(b,a){return(((b==2)&&(a==2))||(b==1))};simpleO.powSize=function(a){return Math.pow(a,2)};simpleO.fn=function(c,b){var a=1;for(i=1;i<=c;++i){a*=Math.pow(b,2*i)-1}return a*Math.pow(b,this.powSize(c))/gcd(2,b-1)};var simplePSp=new Simple("projective symplectic group");simplePSp.sym=function(b,a){return"mbox{PS}p_{"+(2*b)+"}("+a+")"};simplePSp.determined=false;simplePSp.exception=function(b,a){return b<3};simplePSp.powSize=function(a){return a*a};simplePSp.fn=function(c,b){var a=1;for(i=1;i<=c;++i){a*=Math.pow(b,2*i)-1}return a*Math.pow(b,this.powSize(c))/gcd(2,b-1)};var simpleOp=new Simple("orthogonal group");simpleOp.sym=function(b,a){return"O_{"+(2*b)+"}^+("+a+")"};simpleOp.determined=false;simpleOp.exception=function(b,a){return b<4};simpleOp.powSize=function(a){return a*(a-1)};simpleOp.fn=function(c,b){var a=1;for(i=1;i<c;++i){a*=Math.pow(b,i*2)-1}return a*Math.pow(b,this.powSize(c))*(Math.pow(b,c)-1)/gcd(4,Math.pow(b,c)-1)};var simpleE6=new Simple("exceptional Chevalley group");simpleE6.sym=function(b,a){return"E_6("+a+")"};simpleE6.fn=function(b,a){return Math.pow(a,36)*(Math.pow(a,12)-1)*(Math.pow(a,9)-1)*(Math.pow(a,8)-1)*(Math.pow(a,6)-1)*(Math.pow(a,5)-1)*(Math.pow(a,2)-1)/gcd(3,a-1)};simpleE6.logBound=78;var simpleE7=new Simple();simpleE7.name="exceptional Chevalley group";simpleE7.sym=function(b,a){return"E_7("+a+")"};simpleE7.fn=function(b,a){return Math.pow(a,63)*(Math.pow(a,18)-1)*(Math.pow(a,14)-1)*(Math.pow(a,12)-1)*(Math.pow(a,10)-1)*(Math.pow(a,8)-1)*(Math.pow(a,6)-1)*(Math.pow(a,2)-1)/gcd(2,a-1)};simpleE7.logBound=133;var simpleE8=new Simple();simpleE8.name="exceptional Chevalley group";simpleE8.sym=function(b,a){return"E_8("+a+")"};simpleE8.fn=function(b,a){return Math.pow(a,120)*(Math.pow(a,30)-1)*(Math.pow(a,24)-1)*(Math.pow(a,20)-1)*(Math.pow(a,18)-1)*(Math.pow(a,14)-1)*(Math.pow(a,12)-1)*(Math.pow(a,8)-1)*(Math.pow(a,2)-1)};simpleE8.logBound=248;var simpleF4=new Simple();simpleF4.name="exceptional Chevalley group";simpleF4.sym=function(b,a){return"F_4("+a+")"};simpleF4.fn=function(b,a){return Math.pow(a,24)*(Math.pow(a,12)-1)*(Math.pow(a,8)-1)*(Math.pow(a,6)-1)*(Math.pow(a,2)-1)};simpleF4.logBound=52;var simpleG2=new Simple();simpleG2.name="exceptional Chevalley group";simpleG2.sym=function(b,a){return"G_2("+a+")"};simpleG2.fn=function(b,a){return Math.pow(a,6)*(Math.pow(a,6)-1)*(Math.pow(a,2)-1)};simpleG2.logBound=14;simpleG2.exception=function(b,a){return(a==2)};var simple2A=new Simple("projective special unitary group");simple2A.sym=function(b,a){return"\\mbox{PSU}_{"+(b+1)+"}("+a+")"};simple2A.determined=false;simple2A.exception=function(b,a){return((b==2&&a==2)||b==1)};simple2A.powSize=function(a){return triangle(a)};simple2A.fn=function(c,b){var a=1;for(i=1;i<=c;++i){a*=Math.pow(b,i+1)+Math.pow(-1,i)}return a*Math.pow(b,this.powSize(c))/gcd(c+1,b+1)};var simpleOm=new Simple("twisted Chevalley group");simpleOm.sym=function(b,a){return"\\mbox{O}_{"+(2*b)+"}^-("+a+")"};simpleOm.determined=false;simpleOm.exception=function(b,a){return b<4};simpleOm.powSize=function(a){return 2*triangle(a-1)};simpleOm.fn=function(c,b){var a=1;for(i=1;i<c;++i){a*=Math.pow(b,2*i)-1}return a*(Math.pow(b,c)+1)*Math.pow(b,this.powSize(c))/gcd(4,Math.pow(b,c)+1)};var simple2E6=new Simple();simple2E6.name="Steinberg group";simple2E6.sym=function(b,a){return"{}^2E_6("+a+"^2)"};simple2E6.fn=function(b,a){return Math.pow(a,36)*(Math.pow(a,12)-1)*(Math.pow(a,9)+1)*(Math.pow(a,8)-1)*(Math.pow(a,6)-1)*(Math.pow(a,5)+1)*(Math.pow(a,2)-1)/gcd(3,a+1)};simple2E6.logBound=78;var simple3D4=new Simple();simple3D4.name="Steinberg group";simple3D4.sym=function(b,a){return"{}^3D_4("+a+"^3)"};simple3D4.fn=function(b,a){return Math.pow(a,12)*(Math.pow(a,6)-1)*(Math.pow(a,2)-1)*(Math.pow(a,8)+Math.pow(a,4)+1)};simple3D4.logBound=28;var simpleSuz=new Simple();simpleSuz.name="Suzuki group";simpleSuz.exception=function(b,a){return((this.nn-1)<<1)<1};simpleSuz.sym=function(b,a){return"Sz(2^{"+this.nn+"})"};simpleSuz.fn=function(b,a){this.nn=Math.log(a)/Math.log(2);if(this.nn!=Math.floor(this.nn)){return -1}return Math.pow(a,2)*(Math.pow(a,2)+1)*(a-1)};simpleSuz.logBound=5;var simpleRee2=new Simple();simpleRee2.name="Ree group";simpleRee2.exception=function(b,a){return this.nn<1};simpleRee2.sym=function(b,a){return"{}^2F_4(2^{"+this.nn+"})"};simpleRee2.fn=function(b,a){this.nn=Math.log(a)/Math.log(2);return Math.pow(a,12)*(Math.pow(a,6)+1)*(Math.pow(a,4)-1)*(Math.pow(a,3)+1)*(a-1)};simpleRee2.logBound=26;var simpleRee3=new Simple();simpleRee3.name="Ree group";simpleRee3.exception=function(b,a){return this.nn<3};simpleRee3.sym=function(b,a){return"{}^2G_2(3^{"+this.nn+"})"};simpleRee3.fn=function(b,a){this.nn=Math.log(a)/Math.log(3);return Math.pow(a,3)*(Math.pow(a,3)+1)*(a-1)};simpleRee3.logBound=7;var simpleTits=new Simple();simpleTits.name="Tits group, ${}^2F_4(2)'$, which is the derived subgroup of (and has index $2$ in) the Ree group ${}^2F_4(2)$";simpleTits.determined=false;simpleTits.powSize=-1;simpleTits.isThisSize=function(a){if(a==17971200){return{n:0,q:0}}};var simpleArray=new Array(simpleA,simplePSL,simpleO,simplePSp,simpleOp,simpleE6,simpleE7,simpleE8,simpleF4,simpleG2,simple2A,simpleOm,simple2E6,simple3D4,simpleSuz,simpleRee2,simpleRee3,simpleTits);function isSimple(g){var f=new List();for(var b=0;b<simpleArray.length;++b){var a=simpleArray[b].isInstance(g);if(a){var c="he "+simpleArray[b].name;if(simpleArray[b].sym!=null){c+=" $"+simpleArray[b].sym(a.n,a.q)+"$"}c+=".</p>";f.pushBack(c)}}if(f.size==0){return false}g.proofComplete=true;g.proofShown=true;$("#inner_statement").html("<p>There is a simple groups of order $"+g+"="+showFactorization(g)+"$.</p>");this.proof="";if(f.size==1){g.proof="<p>Up to isomorphism, the only simple group of order $"+g+"$ is t"+f.first();return true}g.proof="<p>The following are all of the simple groups of order $"+g+"$ up to isomorphism. Some of these groups may be isomorphic, but every simple group of order $"+g+"$ is isomorphic to at least one of the following:</p>";var e=f.head.next;while(e!=f.head){g.proof+="<p>T"+e.data;e=e.next}return true}var spor=new Array("7920","95040","443520","10200960","244823040","175560","604800","50232960","86775571046077562880","4157776806543360000","42305421312000","495766656000","64561751654400","4089470473293004800","1255205709190661721292800","44352000","898128000","4030387200","145926144000","448345497600","460815505920","273030912000000","51765179004000000","90745943887872000","4154781481226426191177580544000000","808017424794512875886459904961710757005754368000000000");var spor_sym=new Array("M_{11}","M_{12}","M_{22}","M_{23}","M_{24}","J_1","J_2","J_3","J_4","Co_1","Co_2","Co_3","Fi_{22}","Fi_{23}","Fi_{24'}","HS","McL","He","Ru","Suz","O'N","HN","Ly","Th","B","M");var spor_name=new Array("a Mathieu group","a Mathieu group","a Mathieu group","a Mathieu group","a Mathieu group","a Janko group","a Janko group","a Janko group","a Janko group","a Conway group","a Conway group","a Conway group","a Fischer Group","a Fischer Group","a Fischer Group","the Higman-Sims group","the McLaughlin group","the Held group","the Rudvalis group","the Suzuki sporadic group","the O'Nan group","the Harada-Norton group","the Lyons group","the Thompson group","the Baby Monster group","the Fischer-Griess Monster, or the monster group");function sporadicTest(a){for(var b=0;b<spor.length;++b){if((""+a.n)==spor[b]){$("#inner_statement").html("<p>There exists a simple group of order $"+a+"="+showFactorization(a)+"$.</p>");a.proof="<p>In fact, the sporadic group $"+spor_sym[b]+"$, ("+spor_name[b]+") has order $"+a.n+"$.</p>";a.proofShown=true;a.proofComplete=true;return true}}return false}function zmod(a){return"\\mathbb{Z}/"+a.toString()+"\\mathbb{Z}"}function sort(b){var a=new List();var c=b.head.next;while(c!=b.head){a.addBefore(c.data,function(e){return(e>=c.data)});c=c.next}return a}function factorial(a){if(a<=0){return 1}return a*factorial(a-1)}function triangle(a){return((a*(a+1))/2)}function gcd(e,c){if(e*c==0){return e+c}if(e<c){return gcd(c,e)}return gcd(c,e%c)}function toList(c,f){var a=false;var e="\\{";var h=c.head.next;var g=0;while(h!=c.head){g+=(""+h.data).length;if(g>40){e+="$$ $$";g=0}e+=h.data+", ";h=h.next}e=e.substr(0,e.lastIndexOf(","))+"\\}";if(e.length>80&&!f){e="\\{"+c.first()+",\\dots,"+c.last()+"\\}";a=true}return{s:e,b:a}}function inOrIs(f,a,c){if(a.size==1){return{s:(f+"="+a.first()),b:false}}var b=toList(a,c);return{s:f+"\\in "+b.s,b:b.b}}function toEnglishCentered(a,e,c){if(a.size==1){return"$$"+a.first()+"$$"}if(a.size==2){return"$$"+a.first()+"\\mbox{ and }"+a.last()+",$$"}var b="$$";var g=a.head.next;var f=0;while(g!=a.head.prev){f+=(""+g.data).length;if(f>40){b+="$$ $$";f=0}b+=g.data+", ";g=g.next}b+="\\mbox{ and }"+a.last()+"$$";if(b.length>80){if(!e){b='<span id = "0:'+c+'" class = "list" title = "Expand this list">$$'+a.first()+",\\dots,"+a.last()+"$$</span>"}else{b='<span id = "1:'+c+'" class = "list" title = "Expand this list">'+b+"</span>"}}return b}function showFactorization(c){var a="";var b=c.primes.head.next;while(b!=c.primes.head){a+=b.data.p;if(b.data.pow>1){a+="^{"+b.data.pow+"}"}if(b.next!=c.primes.head){a+="\\cdot"}b=b.next}return a}function factorialDivisors(f,b){var a=f;var e=0;while(a>1){a/=b;e+=Math.floor(a)}return e}function recursiveEGCD(e,c){if(e==0){return{g:c,y:0,x:1}}var f=recursiveEGCD(c%e,e);return{g:f.g,y:f.x-Math.floor(c/e)*f.y,x:f.y}}function modInverse(c,b){var e=recursiveEGCD(c,b);if(e.g!=1){return false}else{return c%b}}function sylow(a){return"Sylow $"+a+"$-subgroup"}function pf_let(a){return"Let $G$ be a group of order $"+a+"$. "}pf_contradiction="Assume for the sake of contradiction that $G$ is simple. ";function pf_prime(a){return"<p>"+pf_let(a)+"Lagrange's theorem tells us that the order of every subgroup group of $G$ divides $"+a+"$. Since $"+a+"$ is prime, the only subgroups are the trivial group and $G$ itself, so these are the only normal subgroups as well. Hence, $G$ is simple.</p><p>Moreover, up to isomorphism, the only group of order $"+a+"$ is the cyclic group $"+zmod(a)+"$.</p>"}function pf_prime_power(b,a){return"<p>"+pf_let(a)+"By the class equation, $$\\left|G\\right|=\\left|Z(G)\\right|+\\sum_{g\\in O^*}[G:C_G(g)].$$ Since $\\left|G\\right|$ is divisible by $"+b+"$, as is the sum, it follows that $\\left|Z(G)\\right|$ is divisible by $"+b+"$. So either $Z(G)=G$, meaning $G$ is abelian and therefore not simple, or $Z(G)\\lhd G$.</p>"}function pf_one_mod_p(e,b){var c="";if(b.pow>1){c+="^{"+b.pow+"}"}var a=new Num(e.n/Math.pow(b.p,b.pow));a.computeFactorList();return"<p>"+pf_let(e)+"From the Sylow theorems, we know that the number of "+sylow(b)+"s of $G$ must be congruent to $1$ modulo $"+b+"$ and divide the index $[G:P]$, where $P$ is any "+sylow(b)+" of $G$. We calculate the index as $[G:P]="+e+"/"+b+c+"="+a+"$. The divisors of $"+a+"$ are "+toEnglishCentered(a.factors,false,"f_"+a)+"of which, only $1$ is congruent to $1$ modulo $"+b+"$.</p><p>We also know from the Sylow theorems that the "+sylow(b)+"s of $G$ conjugate to each other. Since there is only one "+sylow(b)+", $P$, for each $g\\in G$, $g^{-1}Pg=P$. That is, $P\\lhd G$, so there are no simple groups of order $"+e+"$.</p>"}function pf_div_inject(a){return"<p>"+pf_let(a)+pf_contradiction+"Notice that $"+a+"$ does not divide $"+(a.divInject-1)+"!$, so any map from $G$ to $S_{"+(a.divInject-1)+"}$ cannot be injective. Since for any map $\\psi:G\\to S_n$, we have that $\\ker\\psi\\unlhd G$, there can be no such non-trivial map for $n&lt;"+a.divInject+"$.</p>"}function pf_smart_inject(f){var c=factorial(f.smartInject-1)/f.n;var b="A_{"+(f.smartInject-1)+"}";var e="S_{"+(f.smartInject-1)+"}";var a=pf_div_inject(f)+"<p>Furthermore, if we have a map $\\psi:G\\to S_{"+(f.smartInject-1)+"}$, it cannot be an injection. If it were, let $H=\\psi(G)\\le G$. Notice that $H$ has index $"+c+"$ in $"+e+"$.";if(c%2==1){a+=" Then $H$ cannot be a subgroup of $"+b+"$ lest it have index $"+(c>>1)+".5$ in $"+b+"$."}else{a+=" If $H\\le "+b+"$, then $["+b+":H]="+(c>>1)+"$. Since, $"+b+"$ acts transitively on the cosets of $H$ in $"+b+"$, we have a nontrivial map $\\psi:"+b+"\\to S_{"+(c>>1)+"}$. The kernel of this map is a proper normal subgroup of $"+b+"$. Since this map cannot be injective for divisibility reasons, its existence contradicts the simplicity of $A_{"+(f.smartInject-1)+"}$."}return a+"</p><p>On the other hand, if $H\\not\\le "+b+"$, since $"+b+"\\lhd "+e+"$, it follows that, $1 &lt; "+b+"\\cap H\\lhd "+e+"\\cap H=H\\cong G$, contradicting the simplicity of $G$. Thus, any non-trivial map from $G$ into a symmetric group $S_n$ must in fact have $n\\ge"+f.smartInject+"$.</p>"}function pf_inject(g,f){var a="";var c;if(f.np.last().np>=g.divInject){a+=pf_smart_inject(g);c=g.smartInject}else{a+=pf_div_inject(g);c=g.divInject}var e="";if(f.pow!=1){e="^{"+f.pow+"}"}var b=g.n/Math.pow(f.p,f.pow);return a+"<p>From the Sylow theorems, we know that the number of Sylow "+f+"-subgroups of $G$ must be congruent to $1$ modulo "+f+" and divide the index $[G:P]$, where $P\\ $ is any "+sylow(f)+" of $G$. We calculate the index as $[G:P]="+g+"/"+f.p+e+"="+b+"$. The divisors of $"+b+"$ which are congruent to $1$ modulo $"+f+"$ are "+toEnglishCentered(g.kModM(1,f.p),false,"CAN'T MATTER")+"</p><p>Since $G$ acts on the "+sylow(f)+"s transitively by conjugation, we have a nontrivial map $\\phi:G\\to S_{n_{"+f+"}}$ where $n_{"+f+"}$ denotes the number of "+sylow(f)+"s of $G$. But we know that $n_{"+f+"}\\le "+g.kModM(1,f.p).last()+"$. Since $G$ cannot inject into any permutation group $S_n$ for $n&lt;"+c+"$, we know that $\\ker\\phi\\ne 1$. Because the action of $G$ is transitive, $\\ker\\phi\\ne G$. Then we have the nontrivial normal subgroup $\\ker\\phi\\lhd G$. Contradiction.</p>"}function pf_basic(g,c){var a="";if(c){a+=pf_smart_inject(g)}else{a+=pf_div_inject(g)}a+="<p>We also know from the Sylow theorems that for each prime $p$, the number of Sylow $p$-subgroups of $G$ must be congruent to $1$ modulo $p$ and divide the index $[G:P]$, where $P$ is any Sylow $p$-subgroup of $G$. Moreover, $G$ acts on the Sylow $p$-subgroups transitively by conjugation, so we get a map $\\phi_p:G\\to S_{n_p}$, where $n_p$ denotes the number of Sylow $p$-subgroups of $G$. Then we know that for each prime $p$ dividing $\\left|G\\right|$, $n_p\\ge";if(c){a+=g.smartInject}else{a+=g.divInject}a+="$. Therefore,";var f=g.primes.head.next;while(f!=g.primes.head.prev){var e=inOrIs("n_{"+f.data.p+"}",f.data.np,false);if(e.b){a+='<span id = "0:n_'+f.data.p+'" class = "list" title = "Expand this list">$$'+e.s+",$$</span>"}else{a+="$$"+e.s+",$$"}f=f.next}e=inOrIs("n_{"+f.data.p+"}",f.data.np,false);if(e.b){a+="<span id = \0:n_"+f.data.p+'" class = "list" title = "Expand this list">$$\\mbox{and }'+e.s+".$$</span>"}else{a+="$$\\mbox{and }"+e.s+".$$</p>"}return a}var GLOBAL_v=1.3;var GLOBAL_d="May 21, 2012";var GLOBAL_n=null;var GLOBAL_fail=new Array(252,288,420,576,720,756,840);$(function(){$("#version").html('<span id = "vers">Version '+GLOBAL_v+"</span><br>Last updated "+GLOBAL_d);$("#vers").click(function(){sendMessage("Changes","<h4>What's new in Version "+GLOBAL_v+"?</h4><ul><li>Groups sizes $540, 630, 810, 990, 1890$ and more solved.</li><li>Several bugs fixed</li></ul><h4>What's new in Version 1.2?</h4><ul><li>Display issues with long lists fixed.</li><li>Potentially long lines only displayed at users choice.</li><li>Added capability to input arithmetic expressions.</li></ul>")});generateFailList();$("#about").button({icons:{primary:"ui-icon-info"}}).click(function(){sendMessage("About NoMSG","<h4>What is NoMSG?</h4><p>NoMSG is a proof generator. If you input a positive integer $n$, NoMSG will attempt to find a simple group of order $n$, or generate a proof that no such simple groups exist.</p><h4>How does it work?</h4><p>Magic.</p>")});$("#number_in").keyup(function(e){if(e.keyCode==13){$("#go").click()}});$("#go").button().click(function(){var v=$("#number_in").val();for(var i=0;i<v.length;++i){var x=v[i].charCodeAt(0);if(x<40||x==44||x>57){$("#proof").html('<div class="ui-widget"><div class="ui-state-error ui-corner-all"><span class="ui-icon ui-icon-alert" style="float: left; margin-right: .3em;"></span><strong>Error: </strong>I don\'t think "'+v+'" is a number.'+(x==94?'This might be because I can\'t do exponentiation, and you used "^." Sorry to disappoint.':' Please try again, with something slightly more "numbery."')+"</div></div>");return}}try{var x=eval(v)}catch(e){$("#proof").html('<div class="ui-widget"><div class="ui-state-error ui-corner-all"><span class="ui-icon ui-icon-alert" style="float: left; margin-right: .3em;"></span><strong>Error: </strong>Your input was invalid. I\'m not exactly sure why, but you probably messed something up. Try again without messing up this time.</div></div>');return}var y=Math.floor(x);if(y!=x||x<1){$("#inner_statement").html("<p>There are no (simple) groups of order $"+x+"$.</p>");$("#proof").html('<div class="ui-widget"><div class="ui-state-error ui-corner-all"><span class="ui-icon ui-icon-alert" style="float: left; margin-right: .3em;"></span><strong>Error: </strong>Your input was not a positive integer. Please try again, with a number that has a more "positive integer" vibe to it.</div></div>');MathJax.Hub.Typeset();return}solve(x);setListExpandDisplay()})});function solve(a){GLOBAL_n=new Num(a);GLOBAL_n.prove();$("#proof").html(GLOBAL_n.showProof());MathJax.Hub.Typeset()}function setListExpandDisplay(){$("span.list").click(function(){var c=parseInt(this.id.split(":")[0]);var a=this.id.split(":")[1].split("_")[0];var g=parseInt(this.id.split("_")[1]);var h=GLOBAL_n.primes.head.next;while(h!=GLOBAL_n.primes.head){if(h.data.p==g){break}h=h.next}console.log(g);if(a=="n"){$(this).html("$$"+inOrIs("n_{"+h.data.p+"}",h.data.np,(c==0)).s+"$$")}else{if(a=="f"){var f=new Num(g);f.computeFactorList();var e=toEnglishCentered(f.factors,(c==0));$(this).html(e.split(">")[1].split("<")[0])}}this.id=""+(1-c)+":"+this.id.split(":")[1];MathJax.Hub.Typeset()})}function setDialog(a){$("#message").dialog({width:400,resizable:false,autoOpen:false,modal:true,open:function(){$(".ui-widget-overlay").hide().fadeIn()},hide:"fade",title:a})}function sendMessage(b,a){$("#message").html(a);setDialog(b);$("#message").dialog("open");MathJax.Hub.Typeset()}function generateFailList(){var b="Smallest inadequate proofs: $\\left|G\\right|=$";for(var a=0;a<6;++a){b+='<span style = "cursor:pointer;" onClick="solve('+GLOBAL_fail[a]+')">$'+GLOBAL_fail[a]+"$</span>$,$"}b+='<span style = "cursor:pointer;" onClick="solve('+GLOBAL_fail[a]+')">$'+GLOBAL_fail[a]+"$</span>$\\dots$";$("table td").first().html(b)}function Technique(e,a,c){if(a===undefined){a=false}if(c===undefined){c=0}this.simpleType=a;this.test=function(g,f,b){return false};this.getProof=function(g,f,b){return""};this.displayCode=c}Technique.prototype={apply:function(e,c,b){if(this.simpleType){b=e}if(b.proofComplete){return false}if(this.test(e,c,b)){b.proofComplete=true;b.proof=this.proof(e,c,b);e.workedOptions.pushBack(b);if(this.simpleType){var a=$("#inner_statement");switch(this.displayCode){case 0:a.html("<p>There are no simple groups of order $"+e+"$.</p>");break;case 1:a.html("<p>There is a simple group of order $"+e+"$.</p>");break;case 2:a.html("<p>Every group of order $"+e+"$ is simple.</p>");break;case 3:a.html("<p>There are no (simple) groups of order $"+e+"$.</p>");break;default:a.html("<p>What the hell kind of question is that?.</p>")}e.proofShown=true}return true}return false}};TechDP=new Technique("dihedral p test");TechDP.test=function(c,b,a){return((b.p+1==a)&&(b.p*(a<<1)==c.n)&&(b.p>3))};TechDP.proof=function(c,b,a){return"<p>Since $G$ acts transitively on the "+sylow(b)+"s of $G$ by conjugation, we have a nontrivial map $\\phi:G\\to S_{"+a+"}$. If $P$ is a "+sylow(b)+" of $G$, since every element of the normalizer $N_G(P)$ fixes $P$, we in fact have a nontrivial map $\\overline\\phi=\\phi\\mid_{N_G(P)}:N_G(P)\\to S_{"+b+"}$. Since $\\left|N_G(P)\\right|="+(b.p<<1)+"$, and the only groups of order $"+(b.p<<1)+"$ are $"+zmod(b.p<<1)+"$ and $D_{"+b+"}$, one of these must be a subgroup of $S_{"+b+"}$, which cannot be.</p>"};TechLI=new Technique("large intersection");TechLI.test=function(e,c,b){if(c.pow==1||b%Math.pow(c.p,2)==1){return false}var a=e.kModM(0,Math.pow(c.p,c.pow));b.ptr=a.head.prev;while(b.ptr.data>Math.pow(c.p,c.pow+1)){b.ptr=b.ptr.prev}b.ptr=b.ptr.next;b.exp="";if(c.pow>2){b.exp="^{"+(c.pow-1)+"}"}return(e.n/b.ptr.data<e.divInject)};TechLI.proof=function(c,b,a){return"<p>Since $n_{"+b+"}\\not\\equiv 1(\\bmod"+b+"^2)$, there must be two distinct "+sylow(b)+"s of $G$, $P$ and $Q$, such that $[P:P\\cap Q]&lt; p^2$. As this index must be a power of $"+b+"$, and $P\\ne Q$, the index must be $"+b+"$. That is, $\\left|P\\cap Q\\right|="+b+a.exp+"$.</p><p>However, $P\\cap Q$ is a $"+b+"$-subgroup of $P$ with index divisible by $"+b+"$, so $"+b+"$ divides $[N_P(P\\cap Q):P\\cap Q]$, meaning $N_P(P\\cap Q)=P$. This means, $P\\cap Q\\lhd P$, so $P\\le N_G(P\\cap Q)$. Similarly, $Q\\le N_G(P\\cap Q)$, so $PQ\\subseteq N_G(P\\cap Q)$. We can therefore bound the size of the normalizer by $$\\left|N_G(P\\cap Q)\\right|\\ge\\left|PQ\\right|=\\frac{\\left|P\\right|\\cdot\\left|Q\\right|}{\\left|P\\cap Q\\right|}="+b+"^{"+(b.pow+1)+"}.$$ We also know that $P\\le N_G(P\\cap Q)$, so $\\left|N_G(P\\cap Q)\\right|$ is a divisor of $\\left|G\\right|$ which has $\\left|P\\right|="+b.p+"^{"+b.pow+"}$ as a proper divisor. Then it is easily verified that $\\left|N_G(P\\cap Q)\\right|$ is at least $"+a.ptr.data+"$. But then $N_G(P\\cap Q)$ is a subgroup of $G$ of index no more than $"+(c.n/a.ptr.data)+"$. Since $G$ acts transitively on the left cosets of $N_G(P\\cap Q)$ by left multiplication, we have a nontrivial map $\\phi: G\\to S_{"+(c.n/a.ptr.data)+"}$. Contradiction.</p>"};TechLAI=new Technique("large abelian intersection");TechLAI.test=function(e,c,b){if(c.pow!=2||e.countElements()+(Math.pow(c.p,2)-2)*b<e.n){return false}var a=e.kModM(0,Math.pow(c.p,2));b.ptr=a.head.prev;while(Math.pow(c.p,3)<b.ptr.data){b.ptr=b.ptr.prev}b.ptr=b.ptr.next;return(e.n/b.ptr.data<e.divInject)};TechLAI.proof=function(g,f,e){var a="<p>Since the "+sylow("p")+" cannot intersect nontrivially for any prime $p$ such that $2\\nmid\\left|G\\right|$, at a minimum, we have ";var b=0;var c=g.primes.head.next;while(c!=g.primes.head){if(c.data.p!=f.p&&c.data.pow==1){proof+="$$"+c.data.smallestNP()+"\\cdot("+c.data.toStringWithPower()+" - 1)="+c.data.smallestNP().np*(Math.pow(c.data.p,c.data.pow)-1)+"\\mbox{ elements of order }"+c.data.p+"$$\n";b+=c.data.smallestNP().np*(Math.pow(c.data.p,c.data.pow)-1)}c=c.next}a+="</p><p>Furthermore, for the primes $p$ such that $p^2$ divides $\\left|G\\right|$, there are at least two Sylow $p$-subgroups $P$ and $Q$. While they may have nontrivial intersection, if we are looking for a lower bound on the number of elements in Sylow $p$ subgroups of $G$, we must get $p^m$ elements from $P$ (where $p^m$ divides $\\left|G\\right|$, but $p^{m+1}$ does not), and at least one more element from $Q$. Thus, we get at very least";c=g.primes.head.next;while(c!=g.primes.head){if(c.data.p!=f.p&&c.data.pow>1){proof+="$$"+c.data.smallestNP()+"\\cdot("+c.data+" - 1)="+c.data.smallestNP().np*(c.data.p-1)+"\\mbox{ elements of order }"+c.data.p+"^k$$\n";b+=c.data.smallestNP().np*(c.data.p-1)}c=c.next}return a+"for a total of $"+b+"$ elements.</p><p>Then the "+sylow(f)+" subgroups cannot have trivial intersection, lest there be another $"+e+"\\cdot("+f+"^{"+f.pow+"} - 1)$ elements. So there must be two distinct "+sylow(f)+"s of $G$, $P$ and $Q$, such that $[P:P\\cap Q]&lt; p^2$. As this index must be a power of $"+f+"$, and $P\\ne Q$, the index must be $"+f+"$. That is, $\\left|P\\cap Q\\right|="+f+"$.</p><p>Since every group of order $"+f.toStringWithPower()+"$ is abelian, $P\\cap Q\\lhd P$, so $P\\le N_G(P\\cap Q)$. Similarly, $Q\\le N_G(P\\cap Q)$, so $PQ\\subseteq N_G(P\\cap Q)$. We can therefore bound the size of the normalizer by $$\\left|N_G(P\\cap Q)\\right|\\ge\\left|PQ\\right|=\\frac{\\left|P\\right|\\cdot\\left|Q\\right|}{\\left|P\\cap Q\\right|}="+f+"^{"+(f.pow+1)+"}.$$ We also know that $P\\le N_G(P\\cap Q)$, so $\\left|N_G(P\\cap Q)\\right|$ is a divisor of $\\left|G\\right|$ which has $\\left|P\\right|="+f.p+"^{"+f.pow+"}$ as a proper divisor. Then it is easily verified that $\\left|N_G(P\\cap Q)\\right|$ is at least $"+e.ptr.data+"$. But then $N_G(P\\cap Q)$ is a subgroup of $G$ of index no more than $"+(g.n/e.ptr.data)+"$. Since $G$ acts transitively on the left cosets of $N_G(P\\cap Q)$ by left multiplication, we have a nontrivial map $\\phi: G\\to S_{"+(g.n/e.ptr.data)+"}$. Contradiction.</p>"};TechCount=new Technique("count");TechCount.test=function(e,b,a){var c=e.primes.head.next;a.count=0;while(c!=e.primes.head){if(c.data==b){if(b.pow>1){a.count+=Math.pow(b.p,b.pow)}else{a.count+=a*(b.p-1)}}else{if(c.data.pow>1){a.count+=Math.pow(c.data.p,c.data.pow)}else{a.count+=c.data.smallestNP().np*(c.data.p-1)}}c=c.next}return(a.count>=e)};TechCount.proof=function(h,f,e){var b="<p>If $p$ divides $\\left|G\\right|$, but $p^2$ does not, then the Sylow $p$-subgroups of $G$ are all isomorphic to $"+zmod("p")+"$, and therefore are required to have trivial intersection. That is, if $p^2\\nmid\\left|G\\right|$, we can conclude that $G$ contains $n_p\\cdot(p-1)$ elements of order $p$. We conclude that $G$ has a minimum of";var g=h.primes.head.next;while(g!=h.primes.head){var c=(g.data==f?f:g.data);var a=(g.data==f?e:g.data.smallestNP().np);if(g.data.pow==1){b+="$$"+a+"\\cdot("+c+" - 1)="+a*(c.p-1)+"\\mbox{ elements of order }"+c+"$$\n"}else{b+="$$"+c.toStringWithPower()+"= "+Math.pow(c.p,c.pow)+"\\mbox{ non-identity elements in "+sylow(c)+"s }$$\n"}g=g.next}b+="<p>This constitutes $"+e.count+"$ elements in Sylow subgroups in a group of order $"+h+"$";if(e.count==h.n){b+=", which leaves no room for an identity element"}return b+".</p>"};TechDNorm=new Technique("double normalizer");TechDNorm.test=function(e,c,b){b.ptr=e.primes.head.next;while(b.ptr!=e.primes.head){if(b%b.ptr.data.p!=0&&b.ptr.data.p!=c.p){var a=new Num(e.n/b);a.computeFactorList();return(a.kModM(1,b.ptr.data.p).size==1&&b.ptr.data.p!=c&&b.ptr.data.incompleteNPSize()==1&&(e.n/b.ptr.data.smallestNP())%Math.pow(c.p,c.pow)!=0)}b.ptr=b.ptr.next}return false};TechDNorm.proof=function(e,b,a){var c="";if(b.pow>1){c="^{"+b.pow+"}"}return"<p>Let $P_{"+b+"}$ be a "+sylow(b)+". Then $N_G(P_{"+b+"})$ is a group of order $"+(e.n/a)+"$, and therefore has a "+sylow(a.ptr.data.p)+", $P_{"+a.ptr.data.p+"}$. It is clear that $P_{"+a.ptr.data.p+"}$ is also a "+sylow(a.ptr.data.p)+" of $G$. Applying the Sylow counting technique to the group $N_G(P_{"+b+"})$, tells us that it contains exactly one "+sylow(a.ptr.data.p)+", so $P_{"+a.ptr.data.p+"}\\lhd N_G(P_{"+b+"})$. Since every element of $P_{"+b+"}$ conjugates $P_{"+a.ptr.data.p+"}$ to itself, $P_{"+b+"}\\le N_G(P_{"+a.ptr.data.p+"})$. This means that $"+b+c+"$ must divide the order of $N_G(P_{"+a.ptr.data.p+"})$. But we already know that $\\left|N_G(P_{"+a.ptr.data.p+"})\\right|="+e+"/n_{"+a.ptr.data.p+"} = "+(e.n/a.ptr.data.smallestNP())+"$, a contradiction.</p>"};TechSymDiv=new Technique("symmetric divisors");TechSymDiv.test=function(c,b,a){a.ptr=c.primes.head.next;while(a.ptr!=c.primes.head){if(a.ptr.data.p<=a&&(a.ptr.data.p<<1)>a){a.norm=c.n/a;a.other=factorial(a-a.ptr.data.p)*a.ptr.data.p*(a.ptr.data.p-1);return(a.other%a.norm!=0)||(a.other==a.norm)}a.ptr=a.ptr.next}return false};TechSymDiv.proof=function(c,b,a){pf="<p>We know that $G$ acts on the "+sylow(b)+"s by conjugation, and this action gives rise to a nontrivial map $\\phi: G\\to S_{n_{"+b+"}}=S_{"+a+"}$. If $G$ is to be simple, $\\phi$ must be injective, so we can identify $G$ with a subgroup of $S_{"+a+"}$. Let $P_{"+a.ptr.data.p+"}$ be a "+sylow(a.ptr.data.p)+" of $G$. Since $"+a.ptr.data.p+"^2\\nmid\\left|S_{"+a+"}\\right|$, $P_{"+a.ptr.data.p+"}$ is also a "+sylow(a.ptr.data.p)+" of $S_{"+a+"}$. This means that $N_G(P_{"+a.ptr.data.p+"})\\le N_{S_{"+a+"}}(P_{"+a.ptr.data.p+"})$. We will show that for divisibility reasons, this cannot be.</p><p>We can explicitly count the number of elements in $S_{"+a+"}$ of order $"+a.ptr.data.p+"$. They come precisely from $"+a.ptr.data.p+"$-cycles, of which there are $$\\binom{"+a+"}{"+a.ptr.data.p+"}\\cdot ("+a.ptr.data.p+"-1)!$$ Since each such element is in precisely one "+sylow(a.ptr.data.p)+" of $S_{"+a.ptr.data.p+"}$, and each "+sylow(a.ptr.data.p)+" has exactly $"+(a.ptr.data.p-1)+"$ elements of order $"+a.ptr.data.p+"$, there are $\\binom{"+a+"}{"+a.ptr.data.p+"}\\cdot ("+a.ptr.data.p+"-2)!$ "+sylow(a.ptr.data.p)+"s.</p>";if(a.other%a.norm!=0){return pf+"<p>From the Sylow theorems, we know that $\\left|N_{S_{"+a+"}}(P_{"+a.ptr.data.p+"})\\right|="+a.other+"$. We also know that $\\left|N_G(P_{"+a.ptr.data.p+"})\\right|="+a.norm+"$. However, $$N_G(P_{"+a.ptr.data.p+"})\\le N_{S_{"+a+"}}(P_{"+a.ptr.data.p+"}),$$ which contradicts Lagrange's theorem.</p>"}else{if(a.other==a.norm){return pf+"<p>From the Sylow theorems, we know that $\\left|N_{S_{"+a+"}}(P_{"+a.ptr.data.p+"})\\right|="+a.other+"$. Moreover, we know that $G$ embeds into $A_{"+a+"}$, lest $G\\cap A_{"+a+"}\\lhd G$. So $N_{A_{"+a+"}}(P_{"+a.ptr.data.p+"}) = "+(a.other/2)+"$. We also know that $\\left|N_G(P_{"+a.ptr.data.p+"})\\right|="+a.norm+"$. However, $$N_G(P_{"+a.ptr.data.p+"})\\le N_{A_{"+a+"}}(P_{"+a.ptr.data.p+"}),$$ which contradicts Lagrange's theorem.</p>"}}};TechTwoOdd=new Technique("2^1*m",true);TechTwoOdd.test=function(a){return a%4==2};TechTwoOdd.proof=function(a){return"<p>Let $G$ be a group of order $"+a+"$. By Cauchy's theorem, $G$ has has an element $g$ of order $2$. As $G$ acts on itself by left multiplication, we have a map $\\phi: G\\to S_{\\left|G\\right|}$. This map by definition is injective, so $\\phi(G)\\cong G$. Since $\\phi(g)$ also has order 2, it must be the product of disjoint $2$-cycles. Furthermore, only the identity $\\phi(e)$ has any fixed points under this action, because $hx=x$, for $h,x\\in G$ means that $h=e$. Thus, $\\phi(g)$ must be the product of $"+(a>>1)+"$ $2$-cycles. Since a $2$-cycle is an odd permutation, and $\\phi(g)$ is the product of an odd number of them, $\\phi(g)$ must be an odd permutation. That is, $\\phi(G)\\not\\subseteq A_{"+a+"}$. In particular, since $A_{"+a+"}\\lhd S_{"+a+"}$, we know that $\\phi(G)\\cap A_{"+a+"}\\lhd \\phi(G)$, meaning that $\\phi(G)$, and therefore $G$, is not simple.</p>"};TechNormInSym=new Technique("element size from Normalizer carefully");TechNormInSym.test=function(g,f,r){var e=new Num(g.n/r.np);if(!e.primes.size>2||!e.mustBeCyclic()){return}r.ptr=g.primes.head.next;while(r.ptr!=g.primes.head){var q=r.ptr.data.smallestNP();var m=g.n/q;var t=e.primes.first().p;var s=e.primes.last().p;var l=modInverse(t,s);var h=modInverse(s,t);if(l&&h&&r.ptr.data.np.size==1&&m%e.n!=0&&e.n!=q.np){var o=q.np*l%s;var k=q.np*h%t;if(o==0){o=s}if(k==0){k=t}var j=o*t+k*s;if(j!=q.np){return true}}r.ptr=r.ptr.next}};TechNormInSym.proof=function(e,c,b){var a=new Num(e.n/b.np);return"<p>Let $P_{"+c+"}$ be a "+sylow(c)+", and let $P_{"+b.ptr.data.p+"}$ be a "+sylow(b.ptr.data.p)+". The normalizer $N_G(P_{"+c+"})$ has order $"+e.n/b.np+"$, and therefore must be cyclic, so we can pick $g\\in G$ to be an element of order $"+e.n/b.np+"$. Since $"+e.n/b.np+"$ does not divide $\\left|N_G(P_{"+b.ptr.data.p+"})\\right|="+e+"/n_{"+b.ptr.data.p+"}="+(e/b.ptr.data.smallestNP())+"$, the group element $g$ cannot normalize $P_{"+b.ptr.data.p+"}$, nor any other "+sylow(b.ptr.data.p)+". Thus, if we identify $g$ with its action on the $"+b.ptr.data.smallestNP()+"$ "+sylow(b.ptr.data.p)+", we see that we have produced an element in $S_{"+b.ptr.data.smallestNP()+"}$ of order $"+e.n/b.np+"$ which has no fixed points.</p><p>Consider the cycle structure of $g$. If we say that $g$ has $a$ $"+a.primes.first().p+"$-cycles, and $b$ $"+a.primes.last().p+"$-cycles, we would need to find a solution to the Diophantine equation $$"+a.primes.first().p+"a+"+a.primes.last().p+"b="+b.ptr.data.smallestNP()+",$$ with $a,b&gt;0$. It is routine to check that no such solution exists.</p>"};TechOne=new Technique("is it one?",true,1);TechOne.test=function(a){return a==1};TechOne.proof=function(a){return"<p>The trivial group is the only group on one element, and has no proper subgroup, let alone nontrivial normal ones, so it is vacuously simple.</p>"};TechSporadic=new Technique("is it a sporadic group",true,1);TechSimple=new Technique("classification theorem",true);TechSimple.test=null;TechPrimes=new Technique("prime or prime power",true,2);TechPrimes.test=function(a){return(a.isPrime()||a.isPrimePower())};TechPrimes.proof=function(a){return(a.isPrime()?pf_prime(a.n):pf_prime_power(a.primes.first().p,a.n))};TechSylow=new Technique("does n_p only have one option",true);TechSylow.test=function(a){a.ptr=a.primes.head.next;while(a.ptr!=a.primes.head){if(a.ptr.data.np.size==1){return true}a.ptr=a.ptr.next}return false};TechSylow.proof=function(a){return pf_one_mod_p(a,a.ptr.data)};TechInjectBound=new Technique("bound the injection sizes",true);TechInjectBound.test=function(c,a){c.ptr=c.primes.head.next;while(c.ptr!=c.primes.head){if(c.ptr.data.np.last().np<a){return c.ptr.data}c.ptr=c.ptr.next}return false};TechInjectBound.proof=function(a){return pf_inject(a,a.ptr.data)};
